{"version":3,"sources":["scripts/main.js"],"names":["tbody","document","querySelector","gameScore","button","messageStart","messageWin","messageLose","messageContainer","gameFields","score","reduce","acc","row","rowSum","cell","isStart","isWin","gameOver","length","column","classList","remove","gameIsWin","some","field","tile","moveTilesRight","moved","current","next","generateRandomNumber","moveTilesLeft","moveTilesUp","moveTilesDown","randomCell","Math","floor","random","randomRow","number","handleKeyPress","ev","key","render","addEventListener","innerHTML","i","createElement","add","j","cellValue","textContent","appendChild","toggle","contains","removeChild"],"mappings":";AAAA,aAEA,IAAMA,EAAQC,SAASC,cAAc,SAE/BC,EAAYF,SAASC,cAAc,eAEnCE,EAASH,SAASC,cAAc,UAEhCG,EAAeJ,SAASC,cAAc,kBAEtCI,EAAaL,SAASC,cAAc,gBAEpCK,EAAcN,SAASC,cAAc,iBAErCM,EAAmBP,SAASC,cAAc,sBAE5CO,EAAa,CACf,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAGRC,EAAQD,EAAWE,OAAO,SAACC,EAAKC,GAC3BD,OAAAA,EAAMC,EAAIF,OAAO,SAACG,EAAQC,GAASD,OAAAA,EAASC,GAAM,IACxD,GAECC,GAAU,EAEVC,GAAQ,EAIZ,SAASC,IACF,IAAA,IAAIL,EAAM,EAAGA,EAAMJ,EAAWU,OAAQN,IACpC,IAAA,IAAIO,EAAS,EAAGA,EAASX,EAAWI,GAAKM,OAAQC,IAAU,CAC1DX,GAA4B,IAA5BA,EAAWI,GAAKO,GAClB,OAGEA,GAAAA,EAASX,EAAWI,GAAKM,OAAS,GACjCV,EAAWI,GAAKO,KAAYX,EAAWI,GAAKO,EAAS,GACxD,OAGEP,GAAAA,EAAMJ,EAAWU,OAAS,GACzBV,EAAWI,GAAKO,KAAYX,EAAWI,EAAM,GAAGO,GACnD,OAKNb,EAAYc,UAAUC,OAAO,UAG/B,SAASC,IACQd,EAAWe,KAAK,SAAAC,GAASA,OAAAA,EAAMD,KAAK,SAAAE,GAAQA,OAAS,OAATA,QAGzDT,GAAQ,GAIZ,SAASU,IAGF,IAFDC,IAAAA,GAAQ,EAEHf,EAAM,EAAGA,EAAMJ,EAAWU,OAAQN,IACpC,IAAA,IAAIO,EAAS,EAAGA,EAASX,EAAWI,GAAKM,OAAQC,IAAU,CACxDS,IAAAA,EAAUpB,EAAWI,GAAKO,GAC1BU,EAAOrB,EAAWI,GAAKO,EAAS,GAElCU,EAAO,IACO,IAAZD,GACFpB,EAAWI,GAAKO,GAAUU,EAC1BrB,EAAWI,GAAKO,EAAS,GAAK,EAC9BA,GAAU,EACVQ,GAAQ,GACCC,IAAYC,IACrBrB,EAAWI,GAAKO,IAAW,EAC3BX,EAAWI,GAAKO,EAAS,GAAK,EAC9BV,GAASD,EAAWI,GAAKO,GACzBQ,GAAQ,IAMZA,GACFG,IAIJ,SAASC,IAGF,IAFDJ,IAAAA,GAAQ,EAEHf,EAAM,EAAGA,EAAMJ,EAAWU,OAAQN,IACpC,IAAA,IAAIO,EAASX,EAAWI,GAAKM,OAAS,EAAGC,GAAU,EAAGA,IAAU,CAC7DS,IAAAA,EAAUpB,EAAWI,GAAKO,GAC1BU,EAAOrB,EAAWI,GAAKO,EAAS,GAElCU,EAAO,IACO,IAAZD,GACFpB,EAAWI,GAAKO,GAAUU,EAC1BrB,EAAWI,GAAKO,EAAS,GAAK,EAC9BA,EAASX,EAAWI,GAAKM,OACzBS,GAAQ,GACCC,IAAYC,IACrBrB,EAAWI,GAAKO,IAAW,EAC3BX,EAAWI,GAAKO,EAAS,GAAK,EAC9BV,GAASD,EAAWI,GAAKO,GACzBQ,GAAQ,IAMZA,GACFG,IAIJ,SAASE,IAGF,IAFDL,IAAAA,GAAQ,EAEHR,EAAS,EAAGA,EAASX,EAAW,GAAGU,OAAQC,IAC7C,IAAA,IAAIP,EAAM,EAAGA,EAAMJ,EAAWU,OAAS,EAAGN,IAAO,CAC9CgB,IAAAA,EAAUpB,EAAWI,GAAKO,GAC1BU,EAAOrB,EAAWI,EAAM,GAAGO,GAE7BU,GAAAA,EAAO,EACLD,GAAY,IAAZA,EAAe,CACwC,IAAA,EAAA,CAACC,EAAM,GAA/DrB,EAAWI,GAAKO,GADA,EAAA,GACSX,EAAWI,EAAM,GAAGO,GAD7B,EAAA,GAEjBP,GAAO,EACPe,GAAQ,OACCC,IAAYC,IACrBrB,EAAWI,GAAKO,IAAW,EAC3BX,EAAWI,EAAM,GAAGO,GAAU,EAC9BV,GAASD,EAAWI,GAAKO,GACzBQ,GAAQ,GAMZA,GACFG,IAIJ,SAASG,IAGF,IAFDN,IAAAA,GAAQ,EAEHR,EAAS,EAAGA,EAASX,EAAW,GAAGU,OAAQC,IAC7C,IAAA,IAAIP,EAAMJ,EAAWU,OAAS,EAAGN,EAAM,EAAGA,IAAO,CAC9CgB,IAAAA,EAAUpB,EAAWI,GAAKO,GAC1BU,EAAOrB,EAAWI,EAAM,GAAGO,GAE7BU,EAAO,IACO,IAAZD,GACFpB,EAAWI,GAAKO,GAAUU,EAC1BrB,EAAWI,EAAM,GAAGO,GAAU,EAC9BP,EAAMJ,EAAWU,OACjBS,GAAQ,GACCC,IAAYC,IACrBrB,EAAWI,GAAKO,IAAW,EAC3BX,EAAWI,EAAM,GAAGO,GAAU,EAC9BV,GAASD,EAAWI,GAAKO,GACzBQ,GAAQ,IAMZA,GACFG,IAIJ,SAASA,IAIAtB,IAHH0B,IAAAA,EAAaC,KAAKC,MAAsB,EAAhBD,KAAKE,UAC7BC,EAAYH,KAAKC,MAAsB,EAAhBD,KAAKE,UAEa,IAAtC7B,EAAW0B,GAAYI,IAC5BJ,EAAaC,KAAKC,MAAsB,EAAhBD,KAAKE,UAC7BC,EAAYH,KAAKC,MAAsB,EAAhBD,KAAKE,UAGxBE,IAAAA,EAASJ,KAAKE,SAAW,GAAM,EAAI,EAEzC7B,EAAW0B,GAAYI,GAAaC,EAGtC,SAASC,EAAeC,GAClB1B,GAAAA,EACM0B,OAAAA,EAAGC,KACJ,IAAA,UACHV,IACA,MACG,IAAA,YACHC,IACA,MACG,IAAA,YACHF,IACA,MACG,IAAA,aACHL,IAKNiB,IAnLF3C,SAAS4C,iBAAiB,UAAWJ,GAsLrC,IAAMG,EAAS,WACbzC,EAAU2C,UACmBpC,kCAAAA,OAAAA,EAD7B,eAIAV,EAAM8C,UAAY,GAEb,IAAA,IAAIC,EAAI,EAAGA,EAAItC,EAAWU,OAAQ4B,IAAK,CACpClC,IAAAA,EAAMZ,SAAS+C,cAAc,MAEnCnC,EAAIQ,UAAU4B,IAAI,aAEb,IAAA,IAAIC,EAAI,EAAGA,EAAIzC,EAAWsC,GAAG5B,OAAQ+B,IAAK,CACvCC,IAAAA,EAAY1C,EAAWsC,GAAGG,GAC1BnC,EAAOd,SAAS+C,cAAc,MAEpCjC,EAAKqC,YAA4B,IAAdD,EAAkB,GAAKA,EAC1CpC,EAAKM,UAAU4B,IAAI,cAED,IAAdE,EACFpC,EAAKM,UAAU4B,IAAI,cAEnBlC,EAAKM,UAAU4B,IAAmBE,eAAAA,OAAAA,IAGpCtC,EAAIwC,YAAYtC,GAGlBf,EAAMqD,YAAYxC,GAGpBK,IACAK,IACAjB,EAAWe,UAAUiC,OAAO,UAAWrC,GAElCD,EAEMR,EAAiB+C,SAASlD,IACnCG,EAAiBgD,YAAYnD,GAF7BG,EAAiB6C,YAAYhD,IAMjCD,EAAOyC,iBAAiB,QAAS,WAC/B7B,GAAU,EAEVP,EAAa,CACX,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAGZC,EAAQ,EAERH,EAAYc,UAAU4B,IAAI,UAE1B7C,EAAOiB,UAAU4B,IAAI,WACrB7C,EAAOgD,YAAc,UACrBrB,IACAA,IACAa","file":"main.70ca91f2.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst tbody = document.querySelector('tbody');\n\nconst gameScore = document.querySelector('.game-score');\n\nconst button = document.querySelector('button');\n\nconst messageStart = document.querySelector('.message-start');\n\nconst messageWin = document.querySelector('.message-win');\n\nconst messageLose = document.querySelector('.message-lose');\n\nconst messageContainer = document.querySelector('.message-container');\n\nlet gameFields = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nlet score = gameFields.reduce((acc, row) => {\n  return acc + row.reduce((rowSum, cell) => rowSum + cell, 0);\n}, 0);\n\nlet isStart = false;\n\nlet isWin = false;\n\ndocument.addEventListener('keydown', handleKeyPress);\n\nfunction gameOver() {\n  for (let row = 0; row < gameFields.length; row++) {\n    for (let column = 0; column < gameFields[row].length; column++) {\n      if (gameFields[row][column] === 0) {\n        return;\n      }\n\n      if (column < gameFields[row].length - 1\n        && gameFields[row][column] === gameFields[row][column + 1]) {\n        return;\n      }\n\n      if (row < gameFields.length - 1\n        && gameFields[row][column] === gameFields[row + 1][column]) {\n        return;\n      }\n    }\n  }\n\n  messageLose.classList.remove('hidden');\n}\n\nfunction gameIsWin() {\n  const result = gameFields.some(field => field.some(tile => tile === 2048));\n\n  if (result) {\n    isWin = true;\n  }\n}\n\nfunction moveTilesRight() {\n  let moved = false;\n\n  for (let row = 0; row < gameFields.length; row++) {\n    for (let column = 1; column < gameFields[row].length; column++) {\n      const current = gameFields[row][column];\n      const next = gameFields[row][column - 1];\n\n      if (next > 0) {\n        if (current === 0) {\n          gameFields[row][column] = next;\n          gameFields[row][column - 1] = 0;\n          column = -1;\n          moved = true;\n        } else if (current === next) {\n          gameFields[row][column] *= 2;\n          gameFields[row][column - 1] = 0;\n          score += gameFields[row][column];\n          moved = true;\n        }\n      }\n    }\n  }\n\n  if (moved) {\n    generateRandomNumber();\n  }\n}\n\nfunction moveTilesLeft() {\n  let moved = false;\n\n  for (let row = 0; row < gameFields.length; row++) {\n    for (let column = gameFields[row].length - 1; column >= 0; column--) {\n      const current = gameFields[row][column];\n      const next = gameFields[row][column + 1];\n\n      if (next > 0) {\n        if (current === 0) {\n          gameFields[row][column] = next;\n          gameFields[row][column + 1] = 0;\n          column = gameFields[row].length;\n          moved = true;\n        } else if (current === next) {\n          gameFields[row][column] *= 2;\n          gameFields[row][column + 1] = 0;\n          score += gameFields[row][column];\n          moved = true;\n        }\n      }\n    }\n  }\n\n  if (moved) {\n    generateRandomNumber();\n  }\n}\n\nfunction moveTilesUp() {\n  let moved = false;\n\n  for (let column = 0; column < gameFields[0].length; column++) {\n    for (let row = 0; row < gameFields.length - 1; row++) {\n      const current = gameFields[row][column];\n      const next = gameFields[row + 1][column];\n\n      if (next > 0) {\n        if (current === 0) {\n          [gameFields[row][column], gameFields[row + 1][column]] = [next, 0];\n          row = -1;\n          moved = true;\n        } else if (current === next) {\n          gameFields[row][column] *= 2;\n          gameFields[row + 1][column] = 0;\n          score += gameFields[row][column];\n          moved = true;\n        }\n      }\n    }\n  }\n\n  if (moved) {\n    generateRandomNumber();\n  }\n}\n\nfunction moveTilesDown() {\n  let moved = false;\n\n  for (let column = 0; column < gameFields[0].length; column++) {\n    for (let row = gameFields.length - 1; row > 0; row--) {\n      const current = gameFields[row][column];\n      const next = gameFields[row - 1][column];\n\n      if (next > 0) {\n        if (current === 0) {\n          gameFields[row][column] = next;\n          gameFields[row - 1][column] = 0;\n          row = gameFields.length;\n          moved = true;\n        } else if (current === next) {\n          gameFields[row][column] *= 2;\n          gameFields[row - 1][column] = 0;\n          score += gameFields[row][column];\n          moved = true;\n        }\n      }\n    }\n  }\n\n  if (moved) {\n    generateRandomNumber();\n  }\n}\n\nfunction generateRandomNumber() {\n  let randomCell = Math.floor(Math.random() * 4);\n  let randomRow = Math.floor(Math.random() * 4);\n\n  while (gameFields[randomCell][randomRow] !== 0) {\n    randomCell = Math.floor(Math.random() * 4);\n    randomRow = Math.floor(Math.random() * 4);\n  }\n\n  const number = Math.random() < 0.1 ? 4 : 2;\n\n  gameFields[randomCell][randomRow] = number;\n}\n\nfunction handleKeyPress(ev) {\n  if (isStart) {\n    switch (ev.key) {\n      case 'ArrowUp':\n        moveTilesUp();\n        break;\n      case 'ArrowDown':\n        moveTilesDown();\n        break;\n      case 'ArrowLeft':\n        moveTilesLeft();\n        break;\n      case 'ArrowRight':\n        moveTilesRight();\n        break;\n    }\n  }\n\n  render();\n}\n\nconst render = () => {\n  gameScore.innerHTML = `\n    <span class=\"game-score\">${score}</span>\n  `;\n\n  tbody.innerHTML = '';\n\n  for (let i = 0; i < gameFields.length; i++) {\n    const row = document.createElement('tr');\n\n    row.classList.add('field-row');\n\n    for (let j = 0; j < gameFields[i].length; j++) {\n      const cellValue = gameFields[i][j];\n      const cell = document.createElement('td');\n\n      cell.textContent = cellValue === 0 ? '' : cellValue;\n      cell.classList.add('field-cell');\n\n      if (cellValue === 0) {\n        cell.classList.add('field-cell');\n      } else {\n        cell.classList.add(`field-cell--${cellValue}`);\n      }\n\n      row.appendChild(cell);\n    }\n\n    tbody.appendChild(row);\n  }\n\n  gameOver();\n  gameIsWin();\n  messageWin.classList.toggle('hidden', !isWin);\n\n  if (!isStart) {\n    messageContainer.appendChild(messageStart);\n  } else if (messageContainer.contains(messageStart)) {\n    messageContainer.removeChild(messageStart);\n  }\n};\n\nbutton.addEventListener('click', () => {\n  isStart = true;\n\n  gameFields = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  score = 0;\n\n  messageLose.classList.add('hidden');\n\n  button.classList.add('restart');\n  button.textContent = 'Restart';\n  generateRandomNumber();\n  generateRandomNumber();\n  render();\n});\n"]}